// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Negocio {
    id           Int       @id @default(autoincrement())
    logo         String
    nombre       String
    descripcion  String
    mesa         Int
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    createdBy    User?     @relation(fields: [createdById], references: [id])
    createdById  String?
    negocioClave String
    Pedidos      Pedidos[]

    @@index([nombre])
}

model Pedidos {
    id               Int             @id @default(autoincrement())
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    negocio          Negocio         @relation(fields: [negocioId], references: [id])
    negocioId        Int
    telefonoCliente  String
    idConsultaPedido String
    CarritoCompra    CarritoCompra[]
}

model CarritoCompra {
    id           Int      @id @default(autoincrement())
    indicaciones String
    cantidad     Int
    producto     Producto @relation(fields: [productoId], references: [id])
    productoId   Int
    Pedidos      Pedidos? @relation(fields: [pedidosId], references: [id])
    pedidosId    Int?
    total        Float
}

model Producto {
    id            Int             @id @default(autoincrement())
    nombre        String
    precio        Float
    descripcion   String
    CarritoCompra CarritoCompra[]
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Negocio       Negocio[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
